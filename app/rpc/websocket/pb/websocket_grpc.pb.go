// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: websocket.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebsocketServiceClient is the client API for WebsocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketServiceClient interface {
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	PullMsgBySeq(ctx context.Context, in *PullMsgBySeqReq, opts ...grpc.CallOption) (*PullMsgBySeqResp, error)
	ClearUnreadCount(ctx context.Context, in *ClearUnreadCountReq, opts ...grpc.CallOption) (*ClearUnreadCountResp, error)
	DeleteConversation(ctx context.Context, in *DeleteConversationReq, opts ...grpc.CallOption) (*DeleteConversationResp, error)
	DeleteConversationAllMsg(ctx context.Context, in *DeleteConversationAllMsgReq, opts ...grpc.CallOption) (*DeleteConversationAllMsgResp, error)
	ListUserConversation(ctx context.Context, in *ListUserConversationReq, opts ...grpc.CallOption) (*ListUserConversationResp, error)
	UpdateSubscribedConversations(ctx context.Context, in *UpdateSubscribedConversationsReq, opts ...grpc.CallOption) (*UpdateSubscribedConversationsResp, error)
	ListAllSubscribersByConversation(ctx context.Context, in *ListAllSubscribersByConversationReq, opts ...grpc.CallOption) (*ListAllSubscribersByConversationResp, error)
	CreateConversation(ctx context.Context, in *CreateConversationReq, opts ...grpc.CallOption) (*CreateConversationResp, error)
}

type websocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketServiceClient(cc grpc.ClientConnInterface) WebsocketServiceClient {
	return &websocketServiceClient{cc}
}

func (c *websocketServiceClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) PullMsgBySeq(ctx context.Context, in *PullMsgBySeqReq, opts ...grpc.CallOption) (*PullMsgBySeqResp, error) {
	out := new(PullMsgBySeqResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/PullMsgBySeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) ClearUnreadCount(ctx context.Context, in *ClearUnreadCountReq, opts ...grpc.CallOption) (*ClearUnreadCountResp, error) {
	out := new(ClearUnreadCountResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/ClearUnreadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationReq, opts ...grpc.CallOption) (*DeleteConversationResp, error) {
	out := new(DeleteConversationResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/DeleteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) DeleteConversationAllMsg(ctx context.Context, in *DeleteConversationAllMsgReq, opts ...grpc.CallOption) (*DeleteConversationAllMsgResp, error) {
	out := new(DeleteConversationAllMsgResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/DeleteConversationAllMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) ListUserConversation(ctx context.Context, in *ListUserConversationReq, opts ...grpc.CallOption) (*ListUserConversationResp, error) {
	out := new(ListUserConversationResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/ListUserConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) UpdateSubscribedConversations(ctx context.Context, in *UpdateSubscribedConversationsReq, opts ...grpc.CallOption) (*UpdateSubscribedConversationsResp, error) {
	out := new(UpdateSubscribedConversationsResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/UpdateSubscribedConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) ListAllSubscribersByConversation(ctx context.Context, in *ListAllSubscribersByConversationReq, opts ...grpc.CallOption) (*ListAllSubscribersByConversationResp, error) {
	out := new(ListAllSubscribersByConversationResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/ListAllSubscribersByConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) CreateConversation(ctx context.Context, in *CreateConversationReq, opts ...grpc.CallOption) (*CreateConversationResp, error) {
	out := new(CreateConversationResp)
	err := c.cc.Invoke(ctx, "/pb.websocketService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServiceServer is the server API for WebsocketService service.
// All implementations must embed UnimplementedWebsocketServiceServer
// for forward compatibility
type WebsocketServiceServer interface {
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	PullMsgBySeq(context.Context, *PullMsgBySeqReq) (*PullMsgBySeqResp, error)
	ClearUnreadCount(context.Context, *ClearUnreadCountReq) (*ClearUnreadCountResp, error)
	DeleteConversation(context.Context, *DeleteConversationReq) (*DeleteConversationResp, error)
	DeleteConversationAllMsg(context.Context, *DeleteConversationAllMsgReq) (*DeleteConversationAllMsgResp, error)
	ListUserConversation(context.Context, *ListUserConversationReq) (*ListUserConversationResp, error)
	UpdateSubscribedConversations(context.Context, *UpdateSubscribedConversationsReq) (*UpdateSubscribedConversationsResp, error)
	ListAllSubscribersByConversation(context.Context, *ListAllSubscribersByConversationReq) (*ListAllSubscribersByConversationResp, error)
	CreateConversation(context.Context, *CreateConversationReq) (*CreateConversationResp, error)
	mustEmbedUnimplementedWebsocketServiceServer()
}

// UnimplementedWebsocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebsocketServiceServer struct {
}

func (UnimplementedWebsocketServiceServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedWebsocketServiceServer) PullMsgBySeq(context.Context, *PullMsgBySeqReq) (*PullMsgBySeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMsgBySeq not implemented")
}
func (UnimplementedWebsocketServiceServer) ClearUnreadCount(context.Context, *ClearUnreadCountReq) (*ClearUnreadCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUnreadCount not implemented")
}
func (UnimplementedWebsocketServiceServer) DeleteConversation(context.Context, *DeleteConversationReq) (*DeleteConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedWebsocketServiceServer) DeleteConversationAllMsg(context.Context, *DeleteConversationAllMsgReq) (*DeleteConversationAllMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversationAllMsg not implemented")
}
func (UnimplementedWebsocketServiceServer) ListUserConversation(context.Context, *ListUserConversationReq) (*ListUserConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserConversation not implemented")
}
func (UnimplementedWebsocketServiceServer) UpdateSubscribedConversations(context.Context, *UpdateSubscribedConversationsReq) (*UpdateSubscribedConversationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscribedConversations not implemented")
}
func (UnimplementedWebsocketServiceServer) ListAllSubscribersByConversation(context.Context, *ListAllSubscribersByConversationReq) (*ListAllSubscribersByConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllSubscribersByConversation not implemented")
}
func (UnimplementedWebsocketServiceServer) CreateConversation(context.Context, *CreateConversationReq) (*CreateConversationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedWebsocketServiceServer) mustEmbedUnimplementedWebsocketServiceServer() {}

// UnsafeWebsocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServiceServer will
// result in compilation errors.
type UnsafeWebsocketServiceServer interface {
	mustEmbedUnimplementedWebsocketServiceServer()
}

func RegisterWebsocketServiceServer(s grpc.ServiceRegistrar, srv WebsocketServiceServer) {
	s.RegisterService(&WebsocketService_ServiceDesc, srv)
}

func _WebsocketService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_PullMsgBySeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMsgBySeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).PullMsgBySeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/PullMsgBySeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).PullMsgBySeq(ctx, req.(*PullMsgBySeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_ClearUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearUnreadCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).ClearUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/ClearUnreadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).ClearUnreadCount(ctx, req.(*ClearUnreadCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).DeleteConversation(ctx, req.(*DeleteConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_DeleteConversationAllMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationAllMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).DeleteConversationAllMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/DeleteConversationAllMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).DeleteConversationAllMsg(ctx, req.(*DeleteConversationAllMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_ListUserConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).ListUserConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/ListUserConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).ListUserConversation(ctx, req.(*ListUserConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_UpdateSubscribedConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscribedConversationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).UpdateSubscribedConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/UpdateSubscribedConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).UpdateSubscribedConversations(ctx, req.(*UpdateSubscribedConversationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_ListAllSubscribersByConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllSubscribersByConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).ListAllSubscribersByConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/ListAllSubscribersByConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).ListAllSubscribersByConversation(ctx, req.(*ListAllSubscribersByConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.websocketService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).CreateConversation(ctx, req.(*CreateConversationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketService_ServiceDesc is the grpc.ServiceDesc for WebsocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.websocketService",
	HandlerType: (*WebsocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _WebsocketService_SendMsg_Handler,
		},
		{
			MethodName: "PullMsgBySeq",
			Handler:    _WebsocketService_PullMsgBySeq_Handler,
		},
		{
			MethodName: "ClearUnreadCount",
			Handler:    _WebsocketService_ClearUnreadCount_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _WebsocketService_DeleteConversation_Handler,
		},
		{
			MethodName: "DeleteConversationAllMsg",
			Handler:    _WebsocketService_DeleteConversationAllMsg_Handler,
		},
		{
			MethodName: "ListUserConversation",
			Handler:    _WebsocketService_ListUserConversation_Handler,
		},
		{
			MethodName: "UpdateSubscribedConversations",
			Handler:    _WebsocketService_UpdateSubscribedConversations_Handler,
		},
		{
			MethodName: "ListAllSubscribersByConversation",
			Handler:    _WebsocketService_ListAllSubscribersByConversation_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _WebsocketService_CreateConversation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websocket.proto",
}
