// Code generated by goctl. DO NOT EDIT!
// Source: websocket.proto

package websocketservice

import (
	"context"

	"github.com/IM-Lite/IM-Lite-Server/app/rpc/websocket/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClearUnreadCountReq                  = pb.ClearUnreadCountReq
	ClearUnreadCountResp                 = pb.ClearUnreadCountResp
	CreateConversationReq                = pb.CreateConversationReq
	CreateConversationResp               = pb.CreateConversationResp
	DeleteConversationAllMsgReq          = pb.DeleteConversationAllMsgReq
	DeleteConversationAllMsgResp         = pb.DeleteConversationAllMsgResp
	DeleteConversationReq                = pb.DeleteConversationReq
	DeleteConversationResp               = pb.DeleteConversationResp
	GetUserConversationsReq              = pb.GetUserConversationsReq
	GetUserConversationsResp             = pb.GetUserConversationsResp
	IMMsgDataMQ                          = pb.IMMsgDataMQ
	IMMsgPushMQ                          = pb.IMMsgPushMQ
	ListAllSubscribersByConversationReq  = pb.ListAllSubscribersByConversationReq
	ListAllSubscribersByConversationResp = pb.ListAllSubscribersByConversationResp
	ListUserConversationReq              = pb.ListUserConversationReq
	ListUserConversationResp             = pb.ListUserConversationResp
	MsgData                              = pb.MsgData
	MsgDataList                          = pb.MsgDataList
	MsgOptions                           = pb.MsgOptions
	OfflinePush                          = pb.OfflinePush
	PullMsgBySeqReq                      = pb.PullMsgBySeqReq
	PullMsgBySeqResp                     = pb.PullMsgBySeqResp
	PushBody                             = pb.PushBody
	SendMsgReq                           = pb.SendMsgReq
	SendMsgResp                          = pb.SendMsgResp
	UpdateSubscribedConversationsReq     = pb.UpdateSubscribedConversationsReq
	UpdateSubscribedConversationsResp    = pb.UpdateSubscribedConversationsResp
	UserConversation                     = pb.UserConversation

	WebsocketService interface {
		SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
		PullMsgBySeq(ctx context.Context, in *PullMsgBySeqReq, opts ...grpc.CallOption) (*PullMsgBySeqResp, error)
		ClearUnreadCount(ctx context.Context, in *ClearUnreadCountReq, opts ...grpc.CallOption) (*ClearUnreadCountResp, error)
		DeleteConversation(ctx context.Context, in *DeleteConversationReq, opts ...grpc.CallOption) (*DeleteConversationResp, error)
		DeleteConversationAllMsg(ctx context.Context, in *DeleteConversationAllMsgReq, opts ...grpc.CallOption) (*DeleteConversationAllMsgResp, error)
		ListUserConversation(ctx context.Context, in *ListUserConversationReq, opts ...grpc.CallOption) (*ListUserConversationResp, error)
		UpdateSubscribedConversations(ctx context.Context, in *UpdateSubscribedConversationsReq, opts ...grpc.CallOption) (*UpdateSubscribedConversationsResp, error)
		ListAllSubscribersByConversation(ctx context.Context, in *ListAllSubscribersByConversationReq, opts ...grpc.CallOption) (*ListAllSubscribersByConversationResp, error)
		CreateConversation(ctx context.Context, in *CreateConversationReq, opts ...grpc.CallOption) (*CreateConversationResp, error)
	}

	defaultWebsocketService struct {
		cli zrpc.Client
	}
)

func NewWebsocketService(cli zrpc.Client) WebsocketService {
	return &defaultWebsocketService{
		cli: cli,
	}
}

func (m *defaultWebsocketService) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.SendMsg(ctx, in, opts...)
}

func (m *defaultWebsocketService) PullMsgBySeq(ctx context.Context, in *PullMsgBySeqReq, opts ...grpc.CallOption) (*PullMsgBySeqResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.PullMsgBySeq(ctx, in, opts...)
}

func (m *defaultWebsocketService) ClearUnreadCount(ctx context.Context, in *ClearUnreadCountReq, opts ...grpc.CallOption) (*ClearUnreadCountResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.ClearUnreadCount(ctx, in, opts...)
}

func (m *defaultWebsocketService) DeleteConversation(ctx context.Context, in *DeleteConversationReq, opts ...grpc.CallOption) (*DeleteConversationResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.DeleteConversation(ctx, in, opts...)
}

func (m *defaultWebsocketService) DeleteConversationAllMsg(ctx context.Context, in *DeleteConversationAllMsgReq, opts ...grpc.CallOption) (*DeleteConversationAllMsgResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.DeleteConversationAllMsg(ctx, in, opts...)
}

func (m *defaultWebsocketService) ListUserConversation(ctx context.Context, in *ListUserConversationReq, opts ...grpc.CallOption) (*ListUserConversationResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.ListUserConversation(ctx, in, opts...)
}

func (m *defaultWebsocketService) UpdateSubscribedConversations(ctx context.Context, in *UpdateSubscribedConversationsReq, opts ...grpc.CallOption) (*UpdateSubscribedConversationsResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.UpdateSubscribedConversations(ctx, in, opts...)
}

func (m *defaultWebsocketService) ListAllSubscribersByConversation(ctx context.Context, in *ListAllSubscribersByConversationReq, opts ...grpc.CallOption) (*ListAllSubscribersByConversationResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.ListAllSubscribersByConversation(ctx, in, opts...)
}

func (m *defaultWebsocketService) CreateConversation(ctx context.Context, in *CreateConversationReq, opts ...grpc.CallOption) (*CreateConversationResp, error) {
	client := pb.NewWebsocketServiceClient(m.cli.Conn())
	return client.CreateConversation(ctx, in, opts...)
}
